CFUcountSE
CFUcountMerge
melt(CFUcountMerge)
CFUcountMerge
melt(CFUcountMerge)
melt(CFUcountMerge, id.vars = c("Day", "Name", "Transfer"))
CFUcountMerge
CFUcountMergesubset <- subset(CFUcountMerge, select = -c(Purple,White) )
CFUcountMergesubset
melt(CFUcountMergesubset)
CFUcountMergesubset
CFUcountSE <- summarySE(CFUcountMergesubset, measurevar="Total", groupvars=c("Day", "Name", "Transfer"),
conf.interval = 0.95, .drop = TRUE)
CFUcountSE
ggplot(CFUcountSE,aes(x=Day, y=Total))+
geom_line(aes(colour=Name, group=Transfer)) +
scale_colour_manual(values=c(Name="blue", Transfer="red"))
ggplot(CFUcountSE,aes(x=Day, y=Total))+
geom_line(aes(colour=Name, group=Transfer))
CFUcountMergesubset
melt(CFUcountMergesubset,id.vars=c("Day","Transfer"))
melt(CFUcountMergesubset,id.vars=c("Name","Transfer"))
CFUcountMergesubset$Variables <- do.call(paste, c(dat[c("Name", "Transfer")], sep = ""))
CFUcountMergesubset$Variables <- do.call(paste, c(CFUcountMergesubset[c("Name", "Transfer")], sep = ""))
CFUcountMergesubset
CFURAmerge
CFURAmerge$Variables <- do.call(paste, c(CFURAmerge[c("Name", "Transfer")], sep = ""))
CFURAmerge
ViolMerge
ViolMerge$Variables <- do.call(paste, c(ViolMerge[c("variable", "Transfer")], sep = ""))
ViolMerge
# Now merge on the columns "Treatment"
CFUcountMerge <- rbind(CFU1count, CFU10count)
CFUcountMergesubset <- subset(CFUcountMerge, select = -c(Purple,White) )
CFUcountMergesubset$Variables <- do.call(paste, c(CFUcountMergesubset[c("Name", "Transfer")], sep = ""))
# Now let's do the same thing for everything else
CFU1dayRA$Transfer <- rep(1,nrow(CFU1dayRA))
CFU10dayRA$Transfer <- rep(10,nrow(CFU10dayRA))
CFURAmerge <- rbind(CFU1dayRA, CFU10dayRA)
CFURAmerge$Variables <- do.call(paste, c(CFURAmerge[c("Name", "Transfer")], sep = ""))
# We need to first reshape the violacein datasets before we can merge them
Viol1melt <- melt(Viol1day, id.vars = "Day")
Viol10melt <- melt(Viol10day, id.vars = "Day")
Viol1melt$Transfer <- rep(1,nrow(Viol1melt))
Viol10melt$Transfer <- rep(10,nrow(Viol10melt))
ViolMerge <- rbind(Viol1melt, Viol10melt)
ViolMerge$Variables <- do.call(paste, c(ViolMerge[c("variable", "Transfer")], sep = ""))
# Mean and standard error
CFUcountSE <- summarySE(CFUcountMergesubset, measurevar="Total", groupvars=c("Day", "Variables"),
conf.interval = 0.95, .drop = TRUE)
CFUraSE <- summarySE(CFURAmerge, measurevar="Ratio", groupvars=c("Day", "Variables"),
conf.interval = 0.95, .drop = TRUE)
# Now get the mean and standard error fot violacein extraction
# for each phenotype
ViolSE <- summarySE(ViolMerge, measurevar="value", groupvars=c("variable", "Variables"),
conf.interval = 0.95, .drop = TRUE)
ViolMerge
ViolSE <- summarySE(ViolMerge, measurevar="value", groupvars=c("Day", "Variables"),
conf.interval = 0.95, .drop = TRUE)
ggplot(CFUcountSE, aes(x=Day, y=Total, colour=Variables)) +
geom_errorbar(aes(ymin=Total-se, ymax=Total+se), width=.1) +
geom_line() +
geom_point()
CFUcountMergesubset
CFUcountMergesubset
CFUcountMergesubset$Total <- log(CFUcountMergesubset$Total, 10)
CFUcountMergesubset
CFUcountSE <- summarySE(CFUcountMergesubset, measurevar="Total", groupvars=c("Day", "Variables"),
conf.interval = 0.95, .drop = TRUE)
ggplot(CFUcountSE, aes(x=Day, y=Total, colour=Variables)) +
geom_errorbar(aes(ymin=Total-se, ymax=Total+se), width=.1) +
geom_line() +
geom_point()
CFUraSE
ggplot(CFUraSE, aes(x=Day, y=Total, colour=Variables)) +
geom_errorbar(aes(ymin=Total-se, ymax=Total+se), width=.1) +
geom_line() +
geom_point()
ggplot(CFUraSE, aes(x=Day, y=Ratio, colour=Variables)) +
geom_errorbar(aes(ymin=Total-se, ymax=Total+se), width=.1) +
geom_line() +
geom_point()
ggplot(CFUraSE, aes(x=Day, y=Ratio, colour=Variables)) +
geom_errorbar(aes(ymin=Ratio-se, ymax=Ratio+se), width=.1) +
geom_line() +
geom_point()
CFUraSE
ViolSE
ggplot(CFUraSE, aes(x=Day, y=value, colour=Variables)) +
geom_errorbar(aes(ymin=value-se, ymax=value+se), width=.1) +
geom_line() +
geom_point()
ggplot(ViolSE, aes(x=Day, y=value, colour=Variables)) +
geom_errorbar(aes(ymin=value-se, ymax=value+se), width=.1) +
geom_line() +
geom_point()
ViolSE
setwd('~/github//JanthinoViol')
# Here we are going to analyze colony count and
# violacein extraction data for purple and white strains
# Across sampling points
#Either work on time series or repeated measures.
rm(list=ls())
getwd()
setwd('~/github//JanthinoViol')
getwd()
library(ggplot2)
library(xlsx)
library(reshape2)
library(RColorBrewer)
library(plyr)
library(Rmisc)
# load data
CFU1count <-  read.csv("./data/StarvationColony_OneDay_07222015_WJB.csv",
head = T, sep = ",")
CFU10count <- read.csv("./data//StarvationColony_TenDay_07222015_WJB.csv",
head=TRUE,sep=",")
CFU1dayRA <- read.csv("./data/StarvationColony_OneDay_07232015_WJB.csv")
CFU10dayRA <- read.csv("./data//StarvationColony_TenDay_07232015_WJB.csv",
head=TRUE,sep=",")
Viol1day <- read.csv("./data/StarvationViolacein_OneDay_07212015_WJB.csv")
Viol10day <- read.csv("./data/StarvationViolacein_TenDay_07212015_WJB.csv")
# Sum the purple and white CFU counts for 1 and 10 day lines
CFU1count$Total <- as.numeric(CFU1count$Purple) + as.numeric(CFU1count$White)
CFU10count$Total <- as.numeric(CFU10count$Purple) + as.numeric(CFU10count$White)
# These data sets are pretty much the same, 10 day and 1 day lines are just different treatments
# So we can just add a column designating whether a row is from a 1 or 10 day line, and merge them
CFU1count$Transfer <- rep(1,nrow(CFU1count))
CFU10count$Transfer <- rep(10,nrow(CFU10count))
# Now merge on the columns "Treatment"
CFUcountMerge <- rbind(CFU1count, CFU10count)
CFUcountMergesubset <- subset(CFUcountMerge, select = -c(Purple,White) )
CFUcountMergesubset$Variables <- do.call(paste, c(CFUcountMergesubset[c("Name", "Transfer")], sep = ""))
# Let's also do a log-transform
d.new <- d
CFUcountMergesubset$Total <- log(CFUcountMergesubset$Total, 10)
# Now let's do the same thing for everything else
CFU1dayRA$Transfer <- rep(1,nrow(CFU1dayRA))
CFU10dayRA$Transfer <- rep(10,nrow(CFU10dayRA))
CFURAmerge <- rbind(CFU1dayRA, CFU10dayRA)
CFURAmerge$Variables <- do.call(paste, c(CFURAmerge[c("Name", "Transfer")], sep = ""))
# We need to first reshape the violacein datasets before we can merge them
Viol1melt <- melt(Viol1day, id.vars = "Day")
Viol10melt <- melt(Viol10day, id.vars = "Day")
Viol1melt$Transfer <- rep(1,nrow(Viol1melt))
Viol10melt$Transfer <- rep(10,nrow(Viol10melt))
ViolMerge <- rbind(Viol1melt, Viol10melt)
ViolMerge$Variables <- do.call(paste, c(ViolMerge[c("variable", "Transfer")], sep = ""))
# Mean and standard error
CFUcountSE <- summarySE(CFUcountMergesubset, measurevar="Total", groupvars=c("Day", "Variables"),
conf.interval = 0.95, .drop = TRUE)
CFUraSE <- summarySE(CFURAmerge, measurevar="Ratio", groupvars=c("Day", "Variables"),
conf.interval = 0.95, .drop = TRUE)
# Now get the mean and standard error fot violacein extraction
# for each phenotype
ViolSE <- summarySE(ViolMerge, measurevar="value", groupvars=c("Day", "Variables"),
conf.interval = 0.95, .drop = TRUE)
# Now let's plot violacein concentration and CFU counts through time
# First up, plot CFU concentration
ggplot(CFUcountSE, aes(x=Day, y=Total, colour=Variables)) +
geom_errorbar(aes(ymin=Total-se, ymax=Total+se), width=.1) +
geom_line() +
geom_point()
# Now the relative abundance
ggplot(CFUraSE, aes(x=Day, y=Ratio, colour=Variables)) +
geom_errorbar(aes(ymin=Ratio-se, ymax=Ratio+se), width=.1) +
geom_line() +
geom_point()
# Violacein concentration
ggplot(ViolSE, aes(x=Day, y=value, colour=Variables)) +
geom_errorbar(aes(ymin=value-se, ymax=value+se), width=.1) +
geom_line() +
geom_point()
comp <- read.csv("./Competition_07232015_WJB.csv", header = T)
rm(list=ls())
getwd()
setwd('~/github//JanthinoViol//')
getwd()
comp <- read.csv("data/Competition_07232015_WJB.csv", header = T)
qqnorm(comp)
comp
comp.aov <- aov(BRatio~ARatio)
comp.aov <- aov(comp$BRatio~comp$ARatio)
comp.aov
summary(comp.aov)
comp
wilcox.test(comp$BRatio, immer$ARatio, paired=TRUE)
library(MASS)
wilcox.test(comp$BRatio, immer$ARatio, paired=TRUE)
wilcox.test(comp$BRatio, comp$ARatio, paired=TRUE)
comp
melted <- melt(comp)
melted
library(ggplot2)
p <- ggplot(meltedComp, aes(x=variable, y=value)) +
geom_violin()
meltedComp <- melt(comp)
p <- ggplot(meltedComp, aes(x=variable, y=value)) +
geom_violin()
p\
p
p <- ggplot(meltedComp, aes(x=variable, y=value)) +
geom_violin(trim=FALSE)
p
p <- ggplot(meltedComp, aes(x=variable, y=value)) +
geom_violin(trim=FALSE) +
stat_summary(fun.y=mean, geom="point", shape=23, size=2,color="red")
p
meltedComp <- melt(comp)
p <- ggplot(meltedComp, aes(x=variable, y=value)) +
geom_violin(trim=FALSE) +
stat_summary(fun.data="mean_sdl", mult=1,
geom="crossbar", width=0.2 ) +
p
p <- ggplot(meltedComp, aes(x=variable, y=value)) +
geom_violin(trim=FALSE) +
stat_summary(fun.data="mean_sdl", mult=1,
geom="crossbar", width=0.2 )
p
install.packages("Hmisc")
p <- ggplot(meltedComp, aes(x=variable, y=value)) +
geom_violin(trim=FALSE) +
stat_summary(fun.data="mean_sdl", mult=1,
geom="crossbar", width=0.2 )
p
p<-ggplot(ToothGrowth, aes(x=dose, y=len, fill=dose)) +
geom_violin(trim=FALSE) +
geom_boxplot(width=0.1) + theme_minimal()
p
p<-ggplot(meltedComp, aes(x=variable, y=value, fill=variable)) +
geom_violin(trim=FALSE) +
geom_boxplot(width=0.1) + theme_minimal()
p
rm(list=ls())
getwd()
setwd('~/github//JanthinoViol//')
getwd()
# The end goal here is to perform an ANOVA and make a bar plot.
media <- read.csv("data/MediaViolacein_07212015_WJB.csv", header = T)
media.aov <- aov(Violacein~Media+Phenotype, data=media)
summary(media.aov)
media
anova(lm(media$Violacein ~ media$Media * media$Phenotype))
library(ggplot2)
media
ggplot(media, aes(x = Media, y = Violacein)) +
geom_boxplot(fill = "grey80", colour = "blue") +
scale_x_discrete() + xlab("Medium") +
ylab("Violacein Units")
library(lattice)
dotplot(media$Violacein ~ media$Media | media$Phenotype)
library(lsmeans)
install.packages("lsmeans")
violaov <- anova(lm(media$Violacein ~ media$Media * media$Phenotype))
violaov
lsmeans(violaov, pairwise ~ Media:Phenotype)
lsmeans
library(lsmeans)
lsmeans(violaov, pairwise ~ Media:Phenotype)
interaction.plot(media$Violacein, media$Media, media$Media)
interaction.plot(media$Violacein, media$Media, media$Media)
what <- anova(lm(media$Violacein ~ media$Media + media$Phenotype))
what
interaction.plot(media$Violacein, media$Media, media$Media)
interaction.plot(media$Phenotype, media$Media, media$violacein)
interaction.plot(media$Phenotype, media$Media, media$Violacein)
violaov <- anova(lm(media$Violacein ~ media$Media * media$Phenotype))
violaov
TukeyHSD(aov(Violacein ~ Media, data=media))
violTuk <- TukeyHSD(aov(Violacein ~ Media, data=media))
media
rm(list=ls())
getwd()
setwd('~/github//JanthinoViol//')
getwd()
library(ggplot2)
library(lattice)
library(lsmeans)
# The end goal here is to perform an ANOVA and make a bar plot.
media <- read.csv("data/MediaViolacein_07212015_WJB.csv", header = T)
# omnibus test
#use anova(object) to test the omnibus hypothesis
#Are main or interaction effects present in the independent variables?
violaov <- anova(lm(media$Violacein ~ media$Media * media$Phenotype))
interaction.plot(media$Phenotype, media$Media, media$Violacein)
# So there's a significant omnibus interaction for media,
# but not for the interaction of media and phenotypes
# so we should focus on the main effects, in this case media
# We can visualize what we did above
dotplot(media$Violacein ~ media$Media | media$Phenotype)
# And we can use Tukey's test to see which media types are different
violTuk <- TukeyHSD(aov(Violacein ~ Media, data=media))
violTuk
# So, the comparison of LBYW-LBW, LBYW-LBY, and LBYW-LB yield significant results
generate_label_df <- function(HSD, flev){
# Extract labels and factor levels from Tukey post-hoc
Tukey.levels <- HSD[[flev]][,4]
Tukey.labels <- multcompLetters(Tukey.levels)['Letters']
plot.labels <- names(Tukey.labels[['Letters']])
# Get highest quantile for Tukey's 5 number summary and add a bit of space to buffer between
# upper quantile and label placement
boxplot.df <- ddply(d, flev, function (x) max(fivenum(x$y)) + 0.2)
# Create a data frame out of the factor levels and Tukey's homogenous group letters
plot.levels <- data.frame(plot.labels, labels = Tukey.labels[['Letters']],
stringsAsFactors = FALSE)
# Merge it with the labels
labels.df <- merge(plot.levels, boxplot.df, by.x = 'plot.labels', by.y = flev, sort = FALSE)
return(labels.df)
}
p_base <- ggplot(media, aes(x=Media, y=Violacein)) + geom_boxplot() +
geom_text(data = generate_label_df(violTuk, 'lev'), aes(x = plot.labels, y = V1, label = labels))
rm(list=ls())
getwd()
setwd('~/github//JanthinoViol//')
getwd()
library(ggplot2)
library(lattice)
library(lsmeans)
library(multcompView)
library(plyr)
# The end goal here is to perform an ANOVA and make a bar plot.
media <- read.csv("data/MediaViolacein_07212015_WJB.csv", header = T)
# omnibus test
#use anova(object) to test the omnibus hypothesis
#Are main or interaction effects present in the independent variables?
violaov <- anova(lm(media$Violacein ~ media$Media * media$Phenotype))
interaction.plot(media$Phenotype, media$Media, media$Violacein)
# So there's a significant omnibus interaction for media,
# but not for the interaction of media and phenotypes
# so we should focus on the main effects, in this case media
# We can visualize what we did above
dotplot(media$Violacein ~ media$Media | media$Phenotype)
# And we can use Tukey's test to see which media types are different
violTuk <- TukeyHSD(aov(Violacein ~ Media, data=media))
violTuk
# So, the comparison of LBYW-LBW, LBYW-LBY, and LBYW-LB yield significant results
generate_label_df <- function(HSD, flev){
# Extract labels and factor levels from Tukey post-hoc
Tukey.levels <- HSD[[flev]][,4]
Tukey.labels <- multcompLetters(Tukey.levels)['Letters']
plot.labels <- names(Tukey.labels[['Letters']])
# Get highest quantile for Tukey's 5 number summary and add a bit of space to buffer between
# upper quantile and label placement
boxplot.df <- ddply(d, flev, function (x) max(fivenum(x$y)) + 0.2)
# Create a data frame out of the factor levels and Tukey's homogenous group letters
plot.levels <- data.frame(plot.labels, labels = Tukey.labels[['Letters']],
stringsAsFactors = FALSE)
# Merge it with the labels
labels.df <- merge(plot.levels, boxplot.df, by.x = 'plot.labels', by.y = flev, sort = FALSE)
return(labels.df)
}
p_base <- ggplot(media, aes(x=Media, y=Violacein)) + geom_boxplot() +
geom_text(data = generate_label_df(violTuk, 'lev'), aes(x = plot.labels, y = V1, label = labels))
install.packages("multcompView")
rm(list=ls())
getwd()
setwd('~/github//JanthinoViol//')
getwd()
library(ggplot2)
library(lattice)
library(lsmeans)
library(multcompView)
library(plyr)
# The end goal here is to perform an ANOVA and make a bar plot.
media <- read.csv("data/MediaViolacein_07212015_WJB.csv", header = T)
# omnibus test
#use anova(object) to test the omnibus hypothesis
#Are main or interaction effects present in the independent variables?
violaov <- anova(lm(media$Violacein ~ media$Media * media$Phenotype))
interaction.plot(media$Phenotype, media$Media, media$Violacein)
# So there's a significant omnibus interaction for media,
# but not for the interaction of media and phenotypes
# so we should focus on the main effects, in this case media
# We can visualize what we did above
dotplot(media$Violacein ~ media$Media | media$Phenotype)
# And we can use Tukey's test to see which media types are different
violTuk <- TukeyHSD(aov(Violacein ~ Media, data=media))
violTuk
# So, the comparison of LBYW-LBW, LBYW-LBY, and LBYW-LB yield significant results
generate_label_df <- function(HSD, flev){
# Extract labels and factor levels from Tukey post-hoc
Tukey.levels <- HSD[[flev]][,4]
Tukey.labels <- multcompLetters(Tukey.levels)['Letters']
plot.labels <- names(Tukey.labels[['Letters']])
# Get highest quantile for Tukey's 5 number summary and add a bit of space to buffer between
# upper quantile and label placement
boxplot.df <- ddply(d, flev, function (x) max(fivenum(x$y)) + 0.2)
# Create a data frame out of the factor levels and Tukey's homogenous group letters
plot.levels <- data.frame(plot.labels, labels = Tukey.labels[['Letters']],
stringsAsFactors = FALSE)
# Merge it with the labels
labels.df <- merge(plot.levels, boxplot.df, by.x = 'plot.labels', by.y = flev, sort = FALSE)
return(labels.df)
}
p_base <- ggplot(media, aes(x=Media, y=Violacein)) + geom_boxplot() +
geom_text(data = generate_label_df(violTuk, 'lev'), aes(x = plot.labels, y = V1, label = labels))
dotplot(media$Violacein ~ media$Media | media$Phenotype)
attach(media)
pairs(media, pch=20)
violaov <- anova(lm(media$Violacein ~ media$Media * media$Phenotype))
violaov
summary(violaov)
violaov <- lm(lm(media$Violacein ~ media$Media * media$Phenotype))
summary(violaov)
violaov <- lm(media$Violacein ~ media$Media * media$Phenotype)
summary(violaov)
violaov <- anova(lm(media$Violacein ~ media$Media * media$Phenotype))
violov
violaov
ggplot(media, aes(x=Media, y=Violacein, fill=cond)) + geom_boxplot()
ggplot(media, aes(x=Media, y=Violacein, fill=Media)) + geom_boxplot()
p<-ggplot(media, aes(x=Media, y=Violacein, fill=Media)) +
geom_violin(trim=FALSE) +
geom_boxplot(width=0.1) + theme_minimal()
p
b2<-ggplot(media, aes(Media, Violacein)) +
geom_jitter(alpha=I(1/4), aes(color=zvar)) +
theme(legend.position = "none")
b2
b2<-ggplot(media, aes(Media, Violacein)) +
geom_jitter(alpha=I(1/4), aes(color=Media)) +
theme(legend.position = "none")
b2
media
melt(media)
Viol10day
# Here we are going to analyze colony count and
# violacein extraction data for purple and white strains
# Across sampling points
#Either work on time series or repeated measures.
rm(list=ls())
getwd()
setwd('~/github//JanthinoViol')
getwd()
library(ggplot2)
library(xlsx)
library(reshape2)
library(RColorBrewer)
library(plyr)
library(Rmisc)
# load data
CFU1count <-  read.csv("./data/StarvationColony_OneDay_07222015_WJB.csv",
head = T, sep = ",")
CFU10count <- read.csv("./data//StarvationColony_TenDay_07222015_WJB.csv",
head=TRUE,sep=",")
CFU1dayRA <- read.csv("./data/StarvationColony_OneDay_07232015_WJB.csv")
CFU10dayRA <- read.csv("./data//StarvationColony_TenDay_07232015_WJB.csv",
head=TRUE,sep=",")
Viol1day <- read.csv("./data/StarvationViolacein_OneDay_07212015_WJB.csv")
Viol10day <- read.csv("./data/StarvationViolacein_TenDay_07212015_WJB.csv")
# Sum the purple and white CFU counts for 1 and 10 day lines
CFU1count$Total <- as.numeric(CFU1count$Purple) + as.numeric(CFU1count$White)
CFU10count$Total <- as.numeric(CFU10count$Purple) + as.numeric(CFU10count$White)
# These data sets are pretty much the same, 10 day and 1 day lines are just different treatments
# So we can just add a column designating whether a row is from a 1 or 10 day line, and merge them
CFU1count$Transfer <- rep(1,nrow(CFU1count))
CFU10count$Transfer <- rep(10,nrow(CFU10count))
# Now merge on the columns "Treatment"
CFUcountMerge <- rbind(CFU1count, CFU10count)
CFUcountMergesubset <- subset(CFUcountMerge, select = -c(Purple,White) )
CFUcountMergesubset$Variables <- do.call(paste, c(CFUcountMergesubset[c("Name", "Transfer")], sep = ""))
# Let's also do a log-transform
CFUcountMergesubset$Total <- log(CFUcountMergesubset$Total, 10)
# Now let's do the same thing for everything else
CFU1dayRA$Transfer <- rep(1,nrow(CFU1dayRA))
CFU10dayRA$Transfer <- rep(10,nrow(CFU10dayRA))
CFURAmerge <- rbind(CFU1dayRA, CFU10dayRA)
CFURAmerge$Variables <- do.call(paste, c(CFURAmerge[c("Name", "Transfer")], sep = ""))
# We need to first reshape the violacein datasets before we can merge them
Viol1melt <- melt(Viol1day, id.vars = "Day")
Viol10melt <- melt(Viol10day, id.vars = "Day")
Viol10day
melt(media, id.vars = "Day")
melt(media, id.vars = "Media")
melt(media, id.vars = "Phenotype")
rm(list=ls())
getwd()
setwd('~/github//JanthinoViol//')
getwd()
library(ggplot2)
library(lattice)
library(lsmeans)
library(multcompView)
library(plyr)
# The end goal here is to perform an ANOVA and make a bar plot.
media <- read.csv("data/MediaViolacein_07212015_WJB.csv", header = T)
attach(media)
# Pairwise scatter plot
pairs(media, pch=20)
# omnibus test
#use anova(object) to test the omnibus hypothesis
#Are main or interaction effects present in the independent variables?
violaov <- anova(lm(media$Violacein ~ media$Media * media$Phenotype))
interaction.plot(media$Phenotype, media$Media, media$Violacein)
# So there's a significant omnibus interaction for media,
melt(media, id.vars = "Phenotype")
media
media$Variables <- do.call(paste, c(media[c("Media", "Phenotype")], sep = ""))
ggplot(media, aes(x=Variables, y=Violacein, fill=Variables)) + geom_boxplot()
b2<-ggplot(media, aes(Variables, Violacein)) +
geom_jitter(aes(color=Variables)) +
theme(legend.position = "none")
b2
ggplot(media, aes(x=Variables, y=Violacein, fill=Variables)) + geom_boxplot()
qs <- read.csv("data/QSViolacein_07212015_WJB.csv", header = T)
qs
melt(qs)
qs.melt <- melt(qs)
qs.melt
qs
ggplot(qs.melt, aes(x=variable, y=value, fill=variable)) + geom_boxplot()
wilcox.test(value ~ variable, data=qs.melt)
