pred <- read.csv("./Predation_07232015_WJB.csv", header = T)
attach(pred)
pred.aov <- aov(PTT+WTT~PW, data=pred)
summary(pred.aov)
TukeyHSD(pred.aov)
pred.means <- c(mean(pred$PTT, na.rm=T), mean(pred$WTT, na.rm=T), mean(pred$PW, na.rm=T))
pred.std <- c(sd(pred$PTT, na.rm=T), sd(pred$PTT, na.rm=T), sd(pred$WTT, na.rm=T), sd(pred$WTT, na.rm=T), sd(pred$PW, na.rm=T), sd(pred$PW, na.rm=T))
pred.n <- c(sum(pred$PTT, na.rm=T)/mean(pred$PTT, na.rm=T), sum(pred$WTT, na.rm=T)/mean(pred$WTT, na.rm=T), sum(pred$PW, na.rm=T)/mean(pred$PW, na.rm=T))
pred.se <- c(pred.std/sqrt(abs(pred.n)))
pred.bar <- barplot(pred.means, names = c("Purple", "Mixed Culture", "White"), xlab="Culture Mixed with Tetrahymena", ylab="Purple:White Colony Ratio", ylim=c(0, 1), col=c("darkorchid4", "mediumorchid1", "white"))
abline(h=0)
segments(pred.bar, pred.means+pred.se, pred.bar, pred.means-pred.se)
# Applies vertical marks for standard error
segments(pred.bar -0.05, pred.means+pred.se, pred.bar +0.05, pred.means+pred.se)
# Makes horizontal tick on positive SE
# Numbers determine the width of the ticks
segments(pred.bar -0.05, pred.means-pred.se, pred.bar +0.05, pred.means-pred.se)
setwd("~/Documents/Dropbox/GitHub/JanthinoViol/data")
pred <- read.csv("./Predation_07232015_WJB.csv", header = T)
attach(pred)
pred.aov <- aov(PTT+WTT~PW, data=pred)
summary(pred.aov)
TukeyHSD(pred.aov)
pred.means <- c(mean(pred$PTT, na.rm=T), mean(pred$WTT, na.rm=T), mean(pred$PW, na.rm=T))
pred.std <- c(sd(pred$PTT, na.rm=T), sd(pred$PTT, na.rm=T), sd(pred$WTT, na.rm=T), sd(pred$WTT, na.rm=T), sd(pred$PW, na.rm=T), sd(pred$PW, na.rm=T))
pred.n <- c(sum(pred$PTT, na.rm=T)/mean(pred$PTT, na.rm=T), sum(pred$WTT, na.rm=T)/mean(pred$WTT, na.rm=T), sum(pred$PW, na.rm=T)/mean(pred$PW, na.rm=T))
pred.se <- c(pred.std/sqrt(abs(pred.n)))
pred.bar <- barplot(pred.means, names = c("Purple", "Mixed Culture", "White"), xlab="Culture Mixed with Tetrahymena", ylab="Purple:White Colony Ratio", ylim=c(0, 1), col=c("darkorchid4", "mediumorchid1", "white"))
abline(h=0)
segments(pred.bar, pred.means+pred.se, pred.bar, pred.means-pred.se)
# Applies vertical marks for standard error
segments(pred.bar -0.05, pred.means+pred.se, pred.bar +0.05, pred.means+pred.se)
# Makes horizontal tick on positive SE
# Numbers determine the width of the ticks
segments(pred.bar -0.05, pred.means-pred.se, pred.bar +0.05, pred.means-pred.se)
media <- read.csv("./MediaViolacein_07212015_WJB.csv", header = T)
media.aov <- aov(Violacein~Media+Phenotype, data=media)
summary(media.aov)
TukeyHSD(media.aov)
# Graphing the data may require a little reformatting, but these two-level ANOVAs are great!
media2 <- read.csv("./MediaViolacein_07222015_WJB.csv", header = T)
media.means <- c(mean(media2$PLB, na.rm=T), mean(media2$WLB, na.rm=T), mean(media2$PLBW, na.rm=T), mean(media2$WLBW, na.rm=T), mean(media2$PLBY, na.rm=T), mean(media2$WLBY, na.rm=T), mean(media2$PLBYW, na.rm=T), mean(media2$WLBYW, na.rm=T))
media.std <- c(sd(media2$PLB, na.rm=T), sd(media2$WLB, na.rm=T), sd(media2$PLBW, na.rm=T), sd(media2$WLBW, na.rm=T), sd(media2$PLBY, na.rm=T), sd(media2$WLBY, na.rm=T), sd(media2$PLBYW, na.rm=T), sd(media2$WLBYW, na.rm=T))
media.n <- c(sum(media2$PLB, na.rm=T)/mean(media2$PLB, na.rm=T), sum(media2$WLB, na.rm=T)/mean(media2$WLB, na.rm=T), sum(media2$PLBW, na.rm=T)/mean(media2$PLBW, na.rm=T), sum(media2$WLBW, na.rm=T)/mean(media2$WLBW, na.rm=T), sum(media2$PLBY, na.rm=T)/mean(media2$PLBY, na.rm=T), sum(media2$WLBY, na.rm=T)/mean(media2$WLBY, na.rm=T), sum(media2$PLBYW, na.rm=T)/mean(media2$PLBYW, na.rm=T), sum(media2$WLBYW, na.rm=T)/mean(media2$WLBYW, na.rm=T))
media.se <- c(media.std/sqrt(abs(media.n)))
media.bar <- barplot(media.means, names = c("LB", "LB", "LB-W", "LB-W", "LB-Y", "LB-Y", "LB-YW", "LB-YW"), xlab="Media Type", ylab="Violacein Units", ylim=c(0, 16), col=c("darkorchid4", "white"), las=2)
abline(h=0)
segments(media.bar, media.means+media.se, media.bar, media.means-media.se)
# Applies vertical marks for standard error
segments(media.bar -0.05, media.means+media.se, media.bar +0.05, media.means+media.se)
# Makes horizontal tick on positive SE
# Numbers determine the width of the ticks
segments(media.bar -0.05, media.means-media.se, media.bar +0.05, media.means-media.se)
# I've run into a stumbling block with the legend, but I think that this can be resolved.
legend(locator(1), rownames(media$Phenotype), fill = c("darkorchid4", "white"))
# Error in as.graphicsAnnot(legend) :
# argument "legend" is missing, with no default
qs <- read.csv("./QSViolacein_07212015_WJB.csv", header = T)
attach(qs)
qs.aov <- aov(WNP~WOP, data=qs)
summary(qs.aov)
TukeyHSD(qs.aov)
qs.means <- c(mean(qs$WNP, na.rm=T), mean(qs$WOP, na.rm=T))
qs.std <- c(sd(qs$WNP, na.rm=T), sd(qs$WOP, na.rm=T))
qs.n <- c(sum(qs$WNP, na.rm=T)/mean(qs$WOP, na.rm=T), sum(qs$WOP, na.rm=T)/mean(qs$WNP, na.rm=T))
qs.se <- c(qs.std/sqrt(abs(qs.n)))
qs.bar <- barplot(qs.means, names = c("WNP", "WOP"), xlab="Treatment", ylab="Violacein Units", ylim=c(-1, 2), col=c("darkorchid4", "white"))
abline(h=0)
segments(qs.bar, qs.means+qs.se, qs.bar, qs.means-qs.se)
# Applies vertical marks for standard error
segments(qs.bar -0.05, qs.means+qs.se, qs.bar +0.05, qs.means+qs.se)
# Makes horizontal tick on positive SE
# Numbers determine the width of the ticks
segments(qs.bar -0.05, qs.means-qs.se, qs.bar +0.05, qs.means-qs.se)
comp <- read.csv("./Competition_07232015_WJB.csv", header = T)
attach(comp)
# Consider the ratio between the purple and the white instead of the raw numbers (since they probably don't mean anything anyway).
comp.aov <- aov(BRatio~ARatio)
summary(comp.aov)
TukeyHSD(comp.aov)
means <- c(mean(comp$BRatio, na.rm=T), mean(comp$ARatio, na.rm=T))
comp.std <- c(sd(comp$BRatio, na.rm=T), sd(comp$ARatio, na.rm=T))
comp.n <- c(sum(comp$BRatio, na.rm=T)/mean(comp$BRatio, na.rm=T), sum(comp$ARatio, na.rm=T)/mean(comp$ARatio, na.rm=T))
comp.se <- c(comp.std/sqrt(comp.n))
comp.bar <- barplot(means, names = c("Before", "After"), xlab="Time Point", ylab="CFU/mL (Ratio Purple:White)", ylim=c(0, 1), col=c("mediumorchid1", "mediumorchid4"), beside=TRUE)
abline(h=0)
segments(comp.bar, means+comp.se, comp.bar, means-comp.se)
# Applies vertical marks for standard error
segments(comp.bar -0.05, means+comp.se, comp.bar +0.05, means+comp.se)
# Makes horizontal tick on positive SE
# Numbers determine the width of the ticks
segments(comp.bar -0.05, means-comp.se, comp.bar +0.05, means-comp.se)
tencol <- read.csv("StarvationColony_TenDay_07232015_2_WJB.csv", header = T)
onecol <- read.csv("StarvationColony_OneDay_07232015_2_WJB.csv", header = T)
# Look at relative abundance and graph separately.
# Also think about doing ratios instead of absolute numbers.
plot(tencol$Day, tencol$P, col='purple')
points(tencol$Day, tencol$W, col='black')
# So these look a lot better, but I'm confused about how to best separate the white and purple ones. So close.
abline(lm(Day~P, data=tencol))
abline(lm(Day~W, data=tencol))
# Run a regression and look for differences, one at a time.
tencolP.reg <- lm(Day~P, data=tencol)
summary(tencol.reg)
# Significance!
tencolW.reg <- lm(Day~W, data=tencol)
summary(tencolW.reg)
plot(onecol$Day, onecol$P, col='purple')
points(onecol$Day, onecol$W, col='black')
abline(lm(Day~P, data=onecol))
abline(lm(Day~W, data=onecol))
onecolP.reg <- lm(Day~P, data=onecol)
summary(onecolP.reg)
onecolW.reg <- lm(Day~W, data=onecol)
summary(onecolW.reg)
tenvio <- read.csv("./StarvationViolacein_TenDay_07212015_WJB.csv", header = T)
onevio <- read.csv("./StarvationViolacein_OneDay_07212015_WJB.csv", header = T)
# This will plot the relevant points.
plot(tenvio$Day, tenvio$P, col='purple')
points(tenvio$Day, tenvio$W, col='black')
abline(lm(Day~P, data=tenvio, col='purple'))
abline(lm(Day~W, data=tenvio, col='black'))
# So, that doesn't look like anything worthwhile. I must wonder why.
# Could a bar plot be a better representation of the data?
# Run a regression and look for differences, one at a time.
tenvioP.reg <- lm(Day~P, data=tenvio)
summary(tenvioP.reg)
log10P <- log(tenvio$P)
# Non-signficant P-value here. I'm not sure what else could be done.
# Caveat: I'm not convinced that violacein is a linear function of cell density?
tenvioW.reg <- lm(Day~W, data=tenvio)
summary(tenvioW.reg)
log10W <- log(tenvio$W)
# Same here. No signficant result. What now? Since they are not linear, is there a good way to normalize?
# Stuck.
# Attempt to plot the logarithmic transformation of the data - will this help?
plot(tenvio$Day, log10P, col='purple')
points(tenvio$Day, log10W, col='black')
#That might have helped.
plot(onevio$Day, onevio$P, col='purple')
points(onevio$Day, onevio$W, col='black')
abline(lm(Day~P, data=onevio, col='purple'))
abline(lm(Day~W, data=onevio, col='black'))
onevioP.reg <- lm(Day~P, data=onevio)
summary(onevioP.reg)
log1P <- log(onevio$P)
onevioW.reg <- lm(Day~W, data=onevio)
summary(onevioW.reg)
log1W <- log(onevio$W)
View(onevio)
View(onevio)
pred.bar <- barplot(pred.means, names = c("Purple", "Mixed Culture", "White"), xlab="Culture Mixed with Tetrahymena", ylab="Purple:White Colony Ratio", ylim=c(0, 1.1), col=c("darkorchid4", "mediumorchid1", "white"))
segments(pred.bar, pred.means+pred.se, pred.bar, pred.means-pred.se)
segments(pred.bar -0.05, pred.means+pred.se, pred.bar +0.05, pred.means+pred.se)
TukeyHSD(pred.aov)
TukeyHSD(media.aov)
TukeyHSD(qs.aov)
TukeyHSD(comp.aov)
media <- read.csv("./MediaViolacein_07212015_WJB.csv", header = T)
media.aov <- aov(Violacein~Media+Phenotype, data=media)
summary(media.aov)
TukeyHSD(media.aov)
# Graphing the data may require a little reformatting, but these two-level ANOVAs are great!
media2 <- read.csv("./MediaViolacein_07222015_WJB.csv", header = T)
media.means <- c(mean(media2$PLB, na.rm=T), mean(media2$WLB, na.rm=T), mean(media2$PLBW, na.rm=T), mean(media2$WLBW, na.rm=T), mean(media2$PLBY, na.rm=T), mean(media2$WLBY, na.rm=T), mean(media2$PLBYW, na.rm=T), mean(media2$WLBYW, na.rm=T))
media.std <- c(sd(media2$PLB, na.rm=T), sd(media2$WLB, na.rm=T), sd(media2$PLBW, na.rm=T), sd(media2$WLBW, na.rm=T), sd(media2$PLBY, na.rm=T), sd(media2$WLBY, na.rm=T), sd(media2$PLBYW, na.rm=T), sd(media2$WLBYW, na.rm=T))
media.n <- c(sum(media2$PLB, na.rm=T)/mean(media2$PLB, na.rm=T), sum(media2$WLB, na.rm=T)/mean(media2$WLB, na.rm=T), sum(media2$PLBW, na.rm=T)/mean(media2$PLBW, na.rm=T), sum(media2$WLBW, na.rm=T)/mean(media2$WLBW, na.rm=T), sum(media2$PLBY, na.rm=T)/mean(media2$PLBY, na.rm=T), sum(media2$WLBY, na.rm=T)/mean(media2$WLBY, na.rm=T), sum(media2$PLBYW, na.rm=T)/mean(media2$PLBYW, na.rm=T), sum(media2$WLBYW, na.rm=T)/mean(media2$WLBYW, na.rm=T))
media.se <- c(media.std/sqrt(abs(media.n)))
media.bar <- barplot(media.means, names = c("LB", "LB", "LB-W", "LB-W", "LB-Y", "LB-Y", "LB-YW", "LB-YW"), xlab="Media Type", ylab="Violacein Units", ylim=c(0, 16), col=c("darkorchid4", "white"), las=2)
abline(h=0)
segments(media.bar, media.means+media.se, media.bar, media.means-media.se)
# Applies vertical marks for standard error
segments(media.bar -0.05, media.means+media.se, media.bar +0.05, media.means+media.se)
# Makes horizontal tick on positive SE
# Numbers determine the width of the ticks
segments(media.bar -0.05, media.means-media.se, media.bar +0.05, media.means-media.se)
# I've run into a stumbling block with the legend, but I think that this can be resolved.
legend(locator(1), rownames(media$Phenotype), fill = c("darkorchid4", "white"))
# Error in as.graphicsAnnot(legend) :
# argument "legend" is missing, with no default
# Latent errors are mostly concerned with the legend on the graph. Everything else looks good.
pred <- read.csv("./Predation_07232015_WJB.csv", header = T)
attach(pred)
pred.aov <- aov(PTT+WTT~PW, data=pred)
summary(pred.aov)
TukeyHSD(pred.aov)
# No factors in the fitted model? I don't know what that means.
pred.means <- c(mean(pred$PTT, na.rm=T), mean(pred$WTT, na.rm=T), mean(pred$PW, na.rm=T))
pred.std <- c(sd(pred$PTT, na.rm=T), sd(pred$PTT, na.rm=T), sd(pred$WTT, na.rm=T), sd(pred$WTT, na.rm=T), sd(pred$PW, na.rm=T), sd(pred$PW, na.rm=T))
pred.n <- c(sum(pred$PTT, na.rm=T)/mean(pred$PTT, na.rm=T), sum(pred$WTT, na.rm=T)/mean(pred$WTT, na.rm=T), sum(pred$PW, na.rm=T)/mean(pred$PW, na.rm=T))
pred.se <- c(pred.std/sqrt(abs(pred.n)))
pred.bar <- barplot(pred.means, names = c("Purple", "Mixed Culture", "White"), xlab="Culture Mixed with Tetrahymena", ylab="Purple:White Colony Ratio", ylim=c(0, 1.1), col=c("darkorchid4", "mediumorchid1", "white"))
abline(h=0)
segments(pred.bar, pred.means+pred.se, pred.bar, pred.means-pred.se)
# Applies vertical marks for standard error
segments(pred.bar -0.05, pred.means+pred.se, pred.bar +0.05, pred.means+pred.se)
# Makes horizontal tick on positive SE
# Numbers determine the width of the ticks
segments(pred.bar -0.05, pred.means-pred.se, pred.bar +0.05, pred.means-pred.se)
qs <- read.csv("./QSViolacein_07212015_WJB.csv", header = T)
attach(qs)
qs.aov <- aov(WNP~WOP, data=qs)
summary(qs.aov)
TukeyHSD(qs.aov)
# This Tukey pops an error as well. I don't know how to get around that.
qs.means <- c(mean(qs$WNP, na.rm=T), mean(qs$WOP, na.rm=T))
qs.std <- c(sd(qs$WNP, na.rm=T), sd(qs$WOP, na.rm=T))
qs.n <- c(sum(qs$WNP, na.rm=T)/mean(qs$WOP, na.rm=T), sum(qs$WOP, na.rm=T)/mean(qs$WNP, na.rm=T))
qs.se <- c(qs.std/sqrt(abs(qs.n)))
qs.bar <- barplot(qs.means, names = c("WNP", "WOP"), xlab="Treatment", ylab="Violacein Units", ylim=c(-1, 2), col=c("darkorchid4", "white"))
abline(h=0)
segments(qs.bar, qs.means+qs.se, qs.bar, qs.means-qs.se)
# Applies vertical marks for standard error
segments(qs.bar -0.05, qs.means+qs.se, qs.bar +0.05, qs.means+qs.se)
# Makes horizontal tick on positive SE
# Numbers determine the width of the ticks
segments(qs.bar -0.05, qs.means-qs.se, qs.bar +0.05, qs.means-qs.se)
# It is odd that the WOP is negative, but that's an adjusting error that can be fixed with some rapidity.
# Looks smooth otherwise.
comp <- read.csv("./Competition_07232015_WJB.csv", header = T)
attach(comp)
# Consider the ratio between the purple and the white instead of the raw numbers (since they probably don't mean anything anyway).
comp.aov <- aov(BRatio~ARatio)
summary(comp.aov)
TukeyHSD(comp.aov)
# Same error as the QSViolacein script.
means <- c(mean(comp$BRatio, na.rm=T), mean(comp$ARatio, na.rm=T))
comp.std <- c(sd(comp$BRatio, na.rm=T), sd(comp$ARatio, na.rm=T))
comp.n <- c(sum(comp$BRatio, na.rm=T)/mean(comp$BRatio, na.rm=T), sum(comp$ARatio, na.rm=T)/mean(comp$ARatio, na.rm=T))
comp.se <- c(comp.std/sqrt(comp.n))
comp.bar <- barplot(means, names = c("Before", "After"), xlab="Time Point", ylab="CFU/mL (Ratio Purple:White)", ylim=c(0, 1), col=c("mediumorchid1", "mediumorchid4"), beside=TRUE)
abline(h=0)
segments(comp.bar, means+comp.se, comp.bar, means-comp.se)
# Applies vertical marks for standard error
segments(comp.bar -0.05, means+comp.se, comp.bar +0.05, means+comp.se)
# Makes horizontal tick on positive SE
# Numbers determine the width of the ticks
segments(comp.bar -0.05, means-comp.se, comp.bar +0.05, means-comp.se)
# This one also runs very smoothly.
tencol <- read.csv("StarvationColony_TenDay_07232015_2_WJB.csv", header = T)
onecol <- read.csv("StarvationColony_OneDay_07232015_2_WJB.csv", header = T)
# Look at relative abundance and graph separately.
# Also think about doing ratios instead of absolute numbers.
plot(tencol$Day, tencol$P, col='purple')
points(tencol$Day, tencol$W, col='black')
abline(lm(Day~P, data=tencol))
abline(lm(Day~W, data=tencol))
# Run a regression and look for differences, one at a time.
tencolP.reg <- lm(Day~P, data=tencol)
summary(tencolP.reg)
# Significance!
tencolW.reg <- lm(Day~W, data=tencol)
summary(tencolW.reg)
plot(onecol$Day, onecol$P, col='purple')
points(onecol$Day, onecol$W, col='black')
abline(lm(Day~P, data=onecol))
abline(lm(Day~W, data=onecol))
onecolP.reg <- lm(Day~P, data=onecol)
summary(onecolP.reg)
onecolW.reg <- lm(Day~W, data=onecol)
summary(onecolW.reg)
# What does it mean to fit a model to it? Will a regression give me that data?
# How do I fit proper lines to it? And how do I get an equation from that?
tenvio <- read.csv("./StarvationViolacein_TenDay_07212015_WJB.csv", header = T)
onevio <- read.csv("./StarvationViolacein_OneDay_07212015_WJB.csv", header = T)
# This will plot the relevant points.
plot(tenvio$Day, tenvio$P, col='purple')
points(tenvio$Day, tenvio$W, col='black')
abline(lm(Day~P, data=tenvio, col='purple'))
abline(lm(Day~W, data=tenvio, col='black'))
# So, that doesn't look like anything worthwhile. I must wonder why.
# Could a bar plot be a better representation of the data?
# Run a regression and look for differences, one at a time.
tenvioP.reg <- lm(Day~P, data=tenvio)
summary(tenvioP.reg)
log10P <- log(tenvio$P)
# Non-signficant P-value here. I'm not sure what else could be done.
# Caveat: I'm not convinced that violacein is a linear function of cell density?
tenvioW.reg <- lm(Day~W, data=tenvio)
summary(tenvioW.reg)
log10W <- log(tenvio$W)
# Same here. No signficant result. What now? Since they are not linear, is there a good way to normalize?
# Stuck.
# Attempt to plot the logarithmic transformation of the data - will this help?
plot(tenvio$Day, log10P, col='purple')
points(tenvio$Day, log10W, col='black')
#That might have helped.
plot(onevio$Day, onevio$P, col='purple')
points(onevio$Day, onevio$W, col='black')
abline(lm(Day~P, data=onevio, col='purple'))
abline(lm(Day~W, data=onevio, col='black'))
onevioP.reg <- lm(Day~P, data=onevio)
summary(onevioP.reg)
log1P <- log(onevio$P)
onevioW.reg <- lm(Day~W, data=onevio)
summary(onevioW.reg)
log1W <- log(onevio$W)
# The lines on this one seem a little erratic, but that might be able to be adjusted.
# Again, how do I extract an equation from this? And why would that be helpful?
